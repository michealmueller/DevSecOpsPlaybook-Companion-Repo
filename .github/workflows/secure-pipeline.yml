name: Secure CI/CD Pipeline

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    outputs:
      sast-findings: ${{ steps.sast.outputs.findings }}
      sca-findings: ${{ steps.sca.outputs.findings }}
      container-findings: ${{ steps.container.outputs.findings }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    # Static Application Security Testing (SAST)
    - name: Run Semgrep SAST
      id: sast
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
        generateSarif: "1"
      continue-on-error: true

    - name: Upload Semgrep SARIF
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

    # Software Composition Analysis (SCA)
    - name: Run Snyk to check for vulnerabilities
      id: sca
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      continue-on-error: true

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: '${{ github.event.repository.name }}'
        path: '.'
        format: 'SARIF'
        args: '--enableRetired'
      continue-on-error: true

    - name: Upload OWASP Dependency Check SARIF
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: reports/dependency-check-report.sarif

    # Container Security Scanning
    - name: Build Docker image
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .

    - name: Run Trivy vulnerability scanner
      id: container
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    # Infrastructure as Code Scanning
    - name: Run Checkov IaC scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: terraform/
        framework: terraform
        output_format: sarif
        output_file_path: reports/checkov.sarif
      continue-on-error: true

    - name: Upload Checkov SARIF
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: reports/checkov.sarif

    # Secrets Detection
    - name: Run TruffleHog secrets scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
      continue-on-error: true

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run linting
      run: |
        flake8 .
        black --check .
        isort --check-only .

    - name: Run tests
      run: |
        pytest tests/ --cov=. --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Build Docker image
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .

  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-test]
    if: always()
    
    steps:
    - name: Security Gate Check
      run: |
        echo "SAST Findings: ${{ needs.security-scan.outputs.sast-findings }}"
        echo "SCA Findings: ${{ needs.security-scan.outputs.sca-findings }}"
        echo "Container Findings: ${{ needs.security-scan.outputs.container-findings }}"
        
        # Fail if critical security issues found
        if [ "${{ needs.security-scan.outputs.sast-findings }}" -gt 0 ]; then
          echo "❌ Critical SAST findings detected. Pipeline blocked."
          exit 1
        fi
        
        if [ "${{ needs.security-scan.outputs.sca-findings }}" -gt 5 ]; then
          echo "⚠️  High number of SCA findings detected. Review required."
          exit 1
        fi
        
        echo "✅ Security gate passed"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-gate, build-and-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-1

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-gate, build-and-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-1

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your deployment commands here
