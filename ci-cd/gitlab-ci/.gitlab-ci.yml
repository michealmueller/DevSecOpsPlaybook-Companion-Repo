stages:
  - security
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  IMAGE_TAG: $CI_COMMIT_SHA

# Security Scanning Stage
security-sast:
  stage: security
  image: returntocorp/semgrep:latest
  script:
    - semgrep --config=auto --json --output=semgrep-results.json .
  artifacts:
    reports:
      sast: semgrep-results.json
    paths:
      - semgrep-results.json
  allow_failure: true

security-dependency-scan:
  stage: security
  image: owasp/dependency-check:latest
  script:
    - dependency-check.sh --project "$CI_PROJECT_NAME" --scan . --format SARIF --out reports/
  artifacts:
    reports:
      dependency_scanning: reports/dependency-check-report.sarif
    paths:
      - reports/
  allow_failure: true

security-container-scan:
  stage: security
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock 
        aquasec/trivy image --format sarif --output trivy-results.sarif $IMAGE_NAME:$IMAGE_TAG
  artifacts:
    reports:
      container_scanning: trivy-results.sarif
    paths:
      - trivy-results.sarif
  allow_failure: true

security-secrets:
  stage: security
  image: trufflesecurity/trufflehog:latest
  script:
    - trufflehog git file://. --since-commit HEAD~1 --only-verified --format sarif --output trufflehog-results.sarif
  artifacts:
    reports:
      secret_detection: trufflehog-results.sarif
    paths:
      - trufflehog-results.sarif
  allow_failure: true

# Build Stage
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
    - docker push $IMAGE_NAME:$IMAGE_TAG
    - docker push $IMAGE_NAME:latest
  only:
    - main
    - develop

# Deploy Stage
deploy-staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to staging environment..."
    - curl -X POST "$STAGING_WEBHOOK_URL" -H "Content-Type: application/json" -d '{"image": "'$IMAGE_NAME:$IMAGE_TAG'"}'
  environment:
    name: staging
    url: https://staging.example.com
  only:
    - develop

deploy-production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to production environment..."
    - curl -X POST "$PRODUCTION_WEBHOOK_URL" -H "Content-Type: application/json" -d '{"image": "'$IMAGE_NAME:$IMAGE_TAG'"}'
  environment:
    name: production
    url: https://production.example.com
  when: manual
  only:
    - main
